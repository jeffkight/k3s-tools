---
# tasks file for common

- name: wipe disks GPT partition tables
  shell: sgdisk --zap-all {{ item }}
  when: wipe_disks
  loop: "{{ wipe_disks_list }}"
  become: yes

- name: add http_proxy to /etc/environment
  lineinfile:
    path: /etc/environment
    regexp: '^http_proxy='
    line: http_proxy="{{ proxy }}"
  when: env_proxy
  become: yes

- name: add HTTP_PROXY to /etc/environment
  lineinfile:
    path: /etc/environment
    regexp: '^HTTP_PROXY='
    line: HTTP_PROXY="{{ proxy }}"
  when: env_proxy
  become: yes

- name: add https_proxy to /etc/environment
  lineinfile:
    path: /etc/environment
    regexp: '^https_proxy='
    line: https_proxy="{{ proxy }}"
  when: env_proxy
  become: yes

- name: add HTTPS_PROXY to /etc/environment
  lineinfile:
    path: /etc/environment
    regexp: '^HTTPS_PROXY='
    line: HTTPS_PROXY="{{ proxy }}"
  when: env_proxy
  become: yes

- name: add no_proxy to /etc/environment
  lineinfile:
    path: /etc/environment
    regexp: '^no_proxy='
    line: no_proxy="{{ no_proxy }}"
  when: env_proxy
  become: yes

- name: add NO_PROXY to /etc/environment
  lineinfile:
    path: /etc/environment
    regexp: '^NO_PROXY='
    line: NO_PROXY="{{ no_proxy }}"
  when: env_proxy
  become: yes

- name: create apt proxy
  template:
    src: roles/common/templates/proxy.conf.j2
    dest: /etc/apt/apt.conf.d/proxy.conf
    mode: '0644'
  become: yes
  when:
  - ansible_facts['os_family'] == "Debian"
  - pkg_proxy

- name: add proxy to yum.conf
  ini_file:
    path: /etc/yum.conf
    section: main
    option: proxy
    no_extra_spaces: yes
    value: "{{ proxy }}"
  become: yes
  when: 
  - ansible_facts['os_family'] == "RedHat"
  - pkg_proxy

- name: update apt cache
  apt:
    update_cache: yes
  become: yes
  when: ansible_facts['os_family'] == "Debian"

- name: update yum cache
  yum:
    update_cache: yes
  become: yes
  when: ansible_facts['os_family'] == "RedHat"

- name: apt autoclean
  apt:
    autoclean: yes
  become: yes
  when: ansible_facts['os_family'] == "Debian"

- name: apt autoremove
  apt:
    autoremove: yes
  become: yes
  when: ansible_facts['os_family'] == "Debian"

- name: yum autoremove
  yum:
    autoremove: yes
  become: yes
  when: ansible_facts['os_family'] == "RedHat"

- name: update all apt packages
  apt:
    name: "*"
    state: latest
  become: yes
  when: ansible_facts['os_family'] == "Debian"

- name: update all yum packages
  yum:
    name: "*"
    state: latest
  become: yes
  when: ansible_facts['os_family'] == "RedHat"

- name: install apt packages
  apt:
    name: "{{ apt_packages }}"
  become: yes
  when: ansible_facts['os_family'] == "Debian"

- name: install yum packages
  yum:
    name: "{{ yum_packages }}"
  become: yes
  when: ansible_facts['os_family'] == "RedHat"

- name: stop and disable ufw
  systemd:
    state: stopped
    enabled: no
    name: ufw
  become: yes
  ignore_errors: yes
  when: ansible_facts['os_family'] == "Debian"

- name: stop and disable firewalld
  systemd:
    state: stopped
    enabled: no
    name: firewalld
  become: yes
  ignore_errors: yes
  when: ansible_facts['os_family'] == "RedHat"

- name: disable swap
  command: swapoff -a
  become: yes

- name: comment out swap in /etc/fstab
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'
  become: yes

- name: install ca chain cert
  copy:
    src: "{{ item }}"
    dest: /usr/local/share/ca-certificates/{{ item|basename }}.crt
    mode: '0644'
  become: yes
  loop: "{{ ca_cert_list }}"
  when: 
  - ansible_facts['os_family'] == "Debian"
  - install_ca

- name: install ca chain cert
  copy:
    src: "{{ item }}"
    dest: /etc/pki/ca-trust/source/anchors/{{ item|basename }}.crt
    mode: '0644'
  become: yes
  loop: "{{ ca_cert_list }}"
  when: 
  - ansible_facts['os_family'] == "RedHat"
  - install_ca

- name: update ca certificates
  command: update-ca-certificates
  become: yes
  register: update_ca_result
  when: 
  - ansible_facts['os_family'] == "Debian"
  - install_ca

- name: update ca result
  debug: var=update_ca_result.stdout_lines
  when: update_ca_result is changed

- name: update ca certificates
  command: update-ca-trust
  become: yes
  register: update_ca_result
  when: 
  - ansible_facts['os_family'] == "RedHat"
  - install_ca

- name: update ca result
  debug: var=update_ca_result.stdout_lines
  when: update_ca_result is changed
